//This file is automatically generated. DO NOT EDIT!

#ifndef ROBOTRACONTEUR_USE_STDAFX
#include "edu__rpi__cats__utilities__clothsim_stubskel.h"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#else
#include "stdafx.h"
#endif
namespace edu
{
namespace rpi
{
namespace cats
{
namespace utilities
{
namespace clothsim
{
std::string edu__rpi__cats__utilities__clothsimFactory::GetServiceName()
{
return "edu.rpi.cats.utilities.clothsim";
}
std::string edu__rpi__cats__utilities__clothsimFactory::DefString()
{
std::string out(
"service edu.rpi.cats.utilities.clothsim\n"
"\n"
"option version 0.5\n"
"\n"
"struct Pose\n"
"field double[9] R\n"
"field double[3] p\n"
"end struct\n"
"\n"
"struct ClothDefinition\n"
"field single width\n"
"field single length\n"
"field single mass\n"
"field uint16 numX\n"
"field uint16 numY\n"
"field uint32 n_points\n"
"field single structure_stiffness\n"
"field single bending_stiffness\n"
"end struct\n"
"\n"
"struct ClothState\n"
"field double t\n"
"field uint16 numX\n"
"field uint16 numY\n"
"field uint32 n_points\n"
"field double[] x\n"
"field double[] y\n"
"field double[] z\n"
"field double[] f\n"
"\n"
"end struct\n"
"\n"
"struct ClothLinks\n"
"field uint16[] left_node\n"
"field uint16[] right_node\n"
"field single[] length\n"
"field single[] stiffness\n"
"end struct\n"
"\n"
"struct DepthImage\n"
"field uint16 width\n"
"field uint16 height\n"
"field single[] data\n"
"end struct\n"
"\n"
"object ClothSimulator\n"
"property uint16[] grasped_nodes00\n"
"property uint16[] grasped_nodes10\n"
"property uint16[] grasped_nodes01\n"
"property uint16[] grasped_nodes11\n"
"\n"
"function ClothDefinition getClothDefinition()\n"
"function ClothLinks getClothLinks()\n"
"function void setClothStiffness(double stiffness, uint8 piterations)\n"
"\n"
"function void start_recording(string record_name)\n"
"function void stop_recording()\n"
"\n"
"function ClothState stepForwardSim(double tstep, Pose p00, Pose p10, Pose p01, Pose p11)\n"
"function ClothState stepSimToConverge(Pose p00, Pose p10, Pose p01, Pose p11)\n"
"function uint16[] getFaceStructure()\n"
"\n"
"function void setCameraPose(Pose pk)\n"
"function DepthImage getRenderedImage()\n"
"\n"
"end object\n"
);
return out;
}
RR_SHARED_PTR<RobotRaconteur::StructureStub> edu__rpi__cats__utilities__clothsimFactory::FindStructureStub(std::string s)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(s);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (objecttype=="Pose") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<Pose_stub>(GetNode()));
if (objecttype=="ClothDefinition") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<ClothDefinition_stub>(GetNode()));
if (objecttype=="ClothState") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<ClothState_stub>(GetNode()));
if (objecttype=="ClothLinks") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<ClothLinks_stub>(GetNode()));
if (objecttype=="DepthImage") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<DepthImage_stub>(GetNode()));
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> edu__rpi__cats__utilities__clothsimFactory::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRStructure> structin)
{
std::string type=structin->RRType();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "edu.rpi.cats.utilities.clothsim") return GetNode()->PackStructure(structin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->PackStructure(structin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::RRObject> edu__rpi__cats__utilities__clothsimFactory::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> mstructin)
{
std::string type=mstructin->GetTypeString();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "edu.rpi.cats.utilities.clothsim") return GetNode()->UnpackStructure(mstructin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->UnpackStructure(mstructin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceStub> edu__rpi__cats__utilities__clothsimFactory::CreateStub(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::ClientContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "edu.rpi.cats.utilities.clothsim") return GetNode()->GetServiceType(servicetype)->CreateStub(type,path,context);
if (objecttype=="ClothSimulator") { RR_SHARED_PTR<ClothSimulator_stub> o=(RR_MAKE_SHARED<ClothSimulator_stub>(path,context)); o->RRInitStub(); return o; }
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceSkel> edu__rpi__cats__utilities__clothsimFactory::CreateSkel(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::RRObject> obj, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "edu.rpi.cats.utilities.clothsim") return GetNode()->GetServiceType(servicetype)->CreateSkel(type,path,obj,context);
if (objecttype=="ClothSimulator") {RR_SHARED_PTR<ClothSimulator_skel> o=RR_MAKE_SHARED<ClothSimulator_skel>(); o->Init(path,obj,context); return o; }
throw RobotRaconteur::ServiceException("Invalid structure skel type.");
return RR_SHARED_PTR<RobotRaconteur::ServiceSkel>();
}
void edu__rpi__cats__utilities__clothsimFactory::DownCastAndThrowException(RobotRaconteur::RobotRaconteurException& rr_exp)
{
std::string rr_type=rr_exp.Error;
if (rr_type.find('.')==std::string::npos)
{
	return;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "edu.rpi.cats.utilities.clothsim") GetNode()->DownCastAndThrowException(rr_exp);
return;
}
RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> edu__rpi__cats__utilities__clothsimFactory::DownCastException(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> rr_exp){
if (!rr_exp) return rr_exp;
std::string rr_type=rr_exp->Error;
if (rr_type.find('.')==std::string::npos)
{
	return rr_exp;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "edu.rpi.cats.utilities.clothsim") return GetNode()->DownCastException(rr_exp);
return rr_exp;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> Pose_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<Pose > s2=RobotRaconteur::rr_cast<Pose >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("R",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->R)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->p)));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("edu.rpi.cats.utilities.clothsim.Pose",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> Pose_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<Pose > ret=RR_MAKE_SHARED<Pose >();
ret->R=RobotRaconteur::MessageElement::FindElement(m->Elements,"R")->CastData<RobotRaconteur::RRArray<double > >();
ret->p=RobotRaconteur::MessageElement::FindElement(m->Elements,"p")->CastData<RobotRaconteur::RRArray<double > >();
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> ClothDefinition_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<ClothDefinition > s2=RobotRaconteur::rr_cast<ClothDefinition >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("width",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(s2->width))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("length",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(s2->length))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("mass",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(s2->mass))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("numX",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint16_t >(s2->numX))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("numY",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint16_t >(s2->numY))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("n_points",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint32_t >(s2->n_points))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("structure_stiffness",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(s2->structure_stiffness))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("bending_stiffness",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<float >(s2->bending_stiffness))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("edu.rpi.cats.utilities.clothsim.ClothDefinition",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> ClothDefinition_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<ClothDefinition > ret=RR_MAKE_SHARED<ClothDefinition >();
ret->width=RobotRaconteur::RRArrayToScalar<float >(RobotRaconteur::MessageElement::FindElement(m->Elements,"width")->CastData<RobotRaconteur::RRArray<float > >());
ret->length=RobotRaconteur::RRArrayToScalar<float >(RobotRaconteur::MessageElement::FindElement(m->Elements,"length")->CastData<RobotRaconteur::RRArray<float > >());
ret->mass=RobotRaconteur::RRArrayToScalar<float >(RobotRaconteur::MessageElement::FindElement(m->Elements,"mass")->CastData<RobotRaconteur::RRArray<float > >());
ret->numX=RobotRaconteur::RRArrayToScalar<uint16_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"numX")->CastData<RobotRaconteur::RRArray<uint16_t > >());
ret->numY=RobotRaconteur::RRArrayToScalar<uint16_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"numY")->CastData<RobotRaconteur::RRArray<uint16_t > >());
ret->n_points=RobotRaconteur::RRArrayToScalar<uint32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"n_points")->CastData<RobotRaconteur::RRArray<uint32_t > >());
ret->structure_stiffness=RobotRaconteur::RRArrayToScalar<float >(RobotRaconteur::MessageElement::FindElement(m->Elements,"structure_stiffness")->CastData<RobotRaconteur::RRArray<float > >());
ret->bending_stiffness=RobotRaconteur::RRArrayToScalar<float >(RobotRaconteur::MessageElement::FindElement(m->Elements,"bending_stiffness")->CastData<RobotRaconteur::RRArray<float > >());
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> ClothState_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<ClothState > s2=RobotRaconteur::rr_cast<ClothState >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("t",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(s2->t))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("numX",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint16_t >(s2->numX))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("numY",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint16_t >(s2->numY))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("n_points",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint32_t >(s2->n_points))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("x",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->x)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("y",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->y)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("z",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->z)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("f",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->f)));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("edu.rpi.cats.utilities.clothsim.ClothState",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> ClothState_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<ClothState > ret=RR_MAKE_SHARED<ClothState >();
ret->t=RobotRaconteur::RRArrayToScalar<double >(RobotRaconteur::MessageElement::FindElement(m->Elements,"t")->CastData<RobotRaconteur::RRArray<double > >());
ret->numX=RobotRaconteur::RRArrayToScalar<uint16_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"numX")->CastData<RobotRaconteur::RRArray<uint16_t > >());
ret->numY=RobotRaconteur::RRArrayToScalar<uint16_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"numY")->CastData<RobotRaconteur::RRArray<uint16_t > >());
ret->n_points=RobotRaconteur::RRArrayToScalar<uint32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"n_points")->CastData<RobotRaconteur::RRArray<uint32_t > >());
ret->x=RobotRaconteur::MessageElement::FindElement(m->Elements,"x")->CastData<RobotRaconteur::RRArray<double > >();
ret->y=RobotRaconteur::MessageElement::FindElement(m->Elements,"y")->CastData<RobotRaconteur::RRArray<double > >();
ret->z=RobotRaconteur::MessageElement::FindElement(m->Elements,"z")->CastData<RobotRaconteur::RRArray<double > >();
ret->f=RobotRaconteur::MessageElement::FindElement(m->Elements,"f")->CastData<RobotRaconteur::RRArray<double > >();
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> ClothLinks_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<ClothLinks > s2=RobotRaconteur::rr_cast<ClothLinks >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("left_node",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->left_node)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("right_node",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->right_node)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("length",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->length)));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("stiffness",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->stiffness)));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("edu.rpi.cats.utilities.clothsim.ClothLinks",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> ClothLinks_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<ClothLinks > ret=RR_MAKE_SHARED<ClothLinks >();
ret->left_node=RobotRaconteur::MessageElement::FindElement(m->Elements,"left_node")->CastData<RobotRaconteur::RRArray<uint16_t > >();
ret->right_node=RobotRaconteur::MessageElement::FindElement(m->Elements,"right_node")->CastData<RobotRaconteur::RRArray<uint16_t > >();
ret->length=RobotRaconteur::MessageElement::FindElement(m->Elements,"length")->CastData<RobotRaconteur::RRArray<float > >();
ret->stiffness=RobotRaconteur::MessageElement::FindElement(m->Elements,"stiffness")->CastData<RobotRaconteur::RRArray<float > >();
return ret;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> DepthImage_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<DepthImage > s2=RobotRaconteur::rr_cast<DepthImage >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("width",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint16_t >(s2->width))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("height",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint16_t >(s2->height))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("data",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(s2->data)));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("edu.rpi.cats.utilities.clothsim.DepthImage",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> DepthImage_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<DepthImage > ret=RR_MAKE_SHARED<DepthImage >();
ret->width=RobotRaconteur::RRArrayToScalar<uint16_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"width")->CastData<RobotRaconteur::RRArray<uint16_t > >());
ret->height=RobotRaconteur::RRArrayToScalar<uint16_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"height")->CastData<RobotRaconteur::RRArray<uint16_t > >());
ret->data=RobotRaconteur::MessageElement::FindElement(m->Elements,"data")->CastData<RobotRaconteur::RRArray<float > >();
return ret;
}

ClothSimulator_stub::ClothSimulator_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void ClothSimulator_stub::RRInitStub()
{
}

RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > ClothSimulator_stub::get_grasped_nodes00()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"grasped_nodes00");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return me->CastData<RobotRaconteur::RRArray<uint16_t > >();
}
void ClothSimulator_stub::set_grasped_nodes00(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"grasped_nodes00");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > ClothSimulator_stub::get_grasped_nodes10()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"grasped_nodes10");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return me->CastData<RobotRaconteur::RRArray<uint16_t > >();
}
void ClothSimulator_stub::set_grasped_nodes10(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"grasped_nodes10");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > ClothSimulator_stub::get_grasped_nodes01()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"grasped_nodes01");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return me->CastData<RobotRaconteur::RRArray<uint16_t > >();
}
void ClothSimulator_stub::set_grasped_nodes01(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"grasped_nodes01");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > ClothSimulator_stub::get_grasped_nodes11()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"grasped_nodes11");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return me->CastData<RobotRaconteur::RRArray<uint16_t > >();
}
void ClothSimulator_stub::set_grasped_nodes11(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"grasped_nodes11");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

RR_SHARED_PTR<ClothDefinition > ClothSimulator_stub::getClothDefinition()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getClothDefinition");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<ClothDefinition >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<ClothLinks > ClothSimulator_stub::getClothLinks()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getClothLinks");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<ClothLinks >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

void ClothSimulator_stub::setClothStiffness(double stiffness, uint8_t piterations)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setClothStiffness");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("stiffness",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(stiffness))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("piterations",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(piterations))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void ClothSimulator_stub::start_recording(std::string record_name)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"start_recording");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("record_name",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(record_name))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void ClothSimulator_stub::stop_recording()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"stop_recording");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

RR_SHARED_PTR<ClothState > ClothSimulator_stub::stepForwardSim(double tstep, RR_SHARED_PTR<Pose > p00, RR_SHARED_PTR<Pose > p10, RR_SHARED_PTR<Pose > p01, RR_SHARED_PTR<Pose > p11)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"stepForwardSim");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("tstep",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(tstep))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p00",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p00)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p10",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p10)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p01",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p01)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p11",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p11)))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<ClothState >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<ClothState > ClothSimulator_stub::stepSimToConverge(RR_SHARED_PTR<Pose > p00, RR_SHARED_PTR<Pose > p10, RR_SHARED_PTR<Pose > p01, RR_SHARED_PTR<Pose > p11)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"stepSimToConverge");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p00",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p00)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p10",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p10)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p01",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p01)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p11",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p11)))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<ClothState >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > ClothSimulator_stub::getFaceStructure()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getFaceStructure");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return rr_me->CastData<RobotRaconteur::RRArray<uint16_t > >();
}

void ClothSimulator_stub::setCameraPose(RR_SHARED_PTR<Pose > pk)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setCameraPose");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("pk",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(pk)))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

RR_SHARED_PTR<DepthImage > ClothSimulator_stub::getRenderedImage()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getRenderedImage");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
RR_SHARED_PTR<RobotRaconteur::MessageElement> rr_me=rr_ret->FindElement("return");
return RobotRaconteur::rr_cast<DepthImage >(RRGetNode()->UnpackStructure(rr_me->CastData<RobotRaconteur::MessageElementStructure>()));
}

void ClothSimulator_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void ClothSimulator_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void ClothSimulator_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>ClothSimulator_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->TransactionID=rr_m->TransactionID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string ClothSimulator_stub::RRType()
{
return "edu.rpi.cats.utilities.clothsim.ClothSimulator";
}
void ClothSimulator_stub::RRClose()
{
ServiceStub::RRClose();
}

void ClothSimulator_stub::async_get_grasped_nodes00(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"grasped_nodes00");
AsyncProcessTransaction(m,boost::bind(&ClothSimulator_stub::rrend_get_grasped_nodes00, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void ClothSimulator_stub::rrend_get_grasped_nodes00(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=me->CastData<RobotRaconteur::RRArray<uint16_t > >();
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_set_grasped_nodes00(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"grasped_nodes00");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
AsyncProcessTransaction(req,boost::bind(&ClothSimulator_stub::rrend_set_grasped_nodes00, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void ClothSimulator_stub::rrend_set_grasped_nodes00(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_get_grasped_nodes10(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"grasped_nodes10");
AsyncProcessTransaction(m,boost::bind(&ClothSimulator_stub::rrend_get_grasped_nodes10, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void ClothSimulator_stub::rrend_get_grasped_nodes10(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=me->CastData<RobotRaconteur::RRArray<uint16_t > >();
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_set_grasped_nodes10(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"grasped_nodes10");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
AsyncProcessTransaction(req,boost::bind(&ClothSimulator_stub::rrend_set_grasped_nodes10, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void ClothSimulator_stub::rrend_set_grasped_nodes10(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_get_grasped_nodes01(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"grasped_nodes01");
AsyncProcessTransaction(m,boost::bind(&ClothSimulator_stub::rrend_get_grasped_nodes01, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void ClothSimulator_stub::rrend_get_grasped_nodes01(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=me->CastData<RobotRaconteur::RRArray<uint16_t > >();
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_set_grasped_nodes01(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"grasped_nodes01");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
AsyncProcessTransaction(req,boost::bind(&ClothSimulator_stub::rrend_set_grasped_nodes01, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void ClothSimulator_stub::rrend_set_grasped_nodes01(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_get_grasped_nodes11(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"grasped_nodes11");
AsyncProcessTransaction(m,boost::bind(&ClothSimulator_stub::rrend_get_grasped_nodes11, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void ClothSimulator_stub::rrend_get_grasped_nodes11(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=me->CastData<RobotRaconteur::RRArray<uint16_t > >();
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_set_grasped_nodes11(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"grasped_nodes11");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
AsyncProcessTransaction(req,boost::bind(&ClothSimulator_stub::rrend_set_grasped_nodes11, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void ClothSimulator_stub::rrend_set_grasped_nodes11(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_getClothDefinition(boost::function<void (RR_SHARED_PTR<ClothDefinition >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getClothDefinition");
AsyncProcessTransaction(rr_req,boost::bind(&ClothSimulator_stub::rrend_getClothDefinition, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ClothSimulator_stub::rrend_getClothDefinition(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<ClothDefinition > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<ClothDefinition >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<ClothDefinition >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<ClothDefinition > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<ClothDefinition >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<ClothDefinition >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<ClothDefinition >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_getClothLinks(boost::function<void (RR_SHARED_PTR<ClothLinks >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getClothLinks");
AsyncProcessTransaction(rr_req,boost::bind(&ClothSimulator_stub::rrend_getClothLinks, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ClothSimulator_stub::rrend_getClothLinks(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<ClothLinks > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<ClothLinks >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<ClothLinks >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<ClothLinks > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<ClothLinks >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<ClothLinks >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<ClothLinks >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_setClothStiffness(double stiffness, uint8_t piterations,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setClothStiffness");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("stiffness",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(stiffness))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("piterations",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<uint8_t >(piterations))));
AsyncProcessTransaction(rr_req,boost::bind(&ClothSimulator_stub::rrend_setClothStiffness, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ClothSimulator_stub::rrend_setClothStiffness(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_start_recording(std::string record_name,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"start_recording");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("record_name",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::stringToRRArray(record_name))));
AsyncProcessTransaction(rr_req,boost::bind(&ClothSimulator_stub::rrend_start_recording, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ClothSimulator_stub::rrend_start_recording(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_stop_recording(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"stop_recording");
AsyncProcessTransaction(rr_req,boost::bind(&ClothSimulator_stub::rrend_stop_recording, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ClothSimulator_stub::rrend_stop_recording(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_stepForwardSim(double tstep, RR_SHARED_PTR<Pose > p00, RR_SHARED_PTR<Pose > p10, RR_SHARED_PTR<Pose > p01, RR_SHARED_PTR<Pose > p11,boost::function<void (RR_SHARED_PTR<ClothState >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"stepForwardSim");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("tstep",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<double >(tstep))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p00",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p00)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p10",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p10)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p01",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p01)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p11",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p11)))));
AsyncProcessTransaction(rr_req,boost::bind(&ClothSimulator_stub::rrend_stepForwardSim, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ClothSimulator_stub::rrend_stepForwardSim(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<ClothState > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<ClothState >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<ClothState >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<ClothState > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<ClothState >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<ClothState >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<ClothState >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_stepSimToConverge(RR_SHARED_PTR<Pose > p00, RR_SHARED_PTR<Pose > p10, RR_SHARED_PTR<Pose > p01, RR_SHARED_PTR<Pose > p11,boost::function<void (RR_SHARED_PTR<ClothState >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"stepSimToConverge");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p00",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p00)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p10",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p10)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p01",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p01)))));
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("p11",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(p11)))));
AsyncProcessTransaction(rr_req,boost::bind(&ClothSimulator_stub::rrend_stepSimToConverge, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ClothSimulator_stub::rrend_stepSimToConverge(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<ClothState > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<ClothState >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<ClothState >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<ClothState > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<ClothState >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<ClothState >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<ClothState >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_getFaceStructure(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getFaceStructure");
AsyncProcessTransaction(rr_req,boost::bind(&ClothSimulator_stub::rrend_getFaceStructure, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ClothSimulator_stub::rrend_getFaceStructure(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=me->CastData<RobotRaconteur::RRArray<uint16_t > >();
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_setCameraPose(RR_SHARED_PTR<Pose > pk,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setCameraPose");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("pk",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(pk)))));
AsyncProcessTransaction(rr_req,boost::bind(&ClothSimulator_stub::rrend_setCameraPose, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ClothSimulator_stub::rrend_setCameraPose(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void ClothSimulator_stub::async_getRenderedImage(boost::function<void (RR_SHARED_PTR<DepthImage >, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"getRenderedImage");
AsyncProcessTransaction(rr_req,boost::bind(&ClothSimulator_stub::rrend_getRenderedImage, RobotRaconteur::rr_cast<ClothSimulator_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void ClothSimulator_stub::rrend_getRenderedImage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<DepthImage > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<DepthImage >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<DepthImage >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<DepthImage > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("return");
rr_ret=RobotRaconteur::rr_cast<DepthImage >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<DepthImage >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<DepthImage >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}

void ClothSimulator_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator > ClothSimulator_skel::get_obj()
{
return RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator >(uncastobj);
}
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::async_ClothSimulator > ClothSimulator_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<edu::rpi::cats::utilities::clothsim::async_ClothSimulator >(uncastobj);
}
void ClothSimulator_skel::ReleaseCastObject() 
{
}
std::string ClothSimulator_skel::GetObjectType()
{
return "edu.rpi.cats.utilities.clothsim.ClothSimulator";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> ClothSimulator_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::async_ClothSimulator > async_obj=get_asyncobj();
if (m->MemberName == "grasped_nodes00")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_get_grasped_nodes00(boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_get_grasped_nodes00,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value=get_obj()->get_grasped_nodes00();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
return mr;
}
}
if (m->MemberName == "grasped_nodes10")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_get_grasped_nodes10(boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_get_grasped_nodes10,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value=get_obj()->get_grasped_nodes10();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
return mr;
}
}
if (m->MemberName == "grasped_nodes01")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_get_grasped_nodes01(boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_get_grasped_nodes01,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value=get_obj()->get_grasped_nodes01();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
return mr;
}
}
if (m->MemberName == "grasped_nodes11")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_get_grasped_nodes11(boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_get_grasped_nodes11,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value=get_obj()->get_grasped_nodes11();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ClothSimulator_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::async_ClothSimulator > async_obj=get_asyncobj();
if (m->MemberName == "grasped_nodes00")
{
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value=m->FindElement("value")->CastData<RobotRaconteur::RRArray<uint16_t > >();
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_set_grasped_nodes00(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_grasped_nodes00(value);
return mr;
}
}
if (m->MemberName == "grasped_nodes10")
{
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value=m->FindElement("value")->CastData<RobotRaconteur::RRArray<uint16_t > >();
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_set_grasped_nodes10(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_grasped_nodes10(value);
return mr;
}
}
if (m->MemberName == "grasped_nodes01")
{
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value=m->FindElement("value")->CastData<RobotRaconteur::RRArray<uint16_t > >();
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_set_grasped_nodes01(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_grasped_nodes01(value);
return mr;
}
}
if (m->MemberName == "grasped_nodes11")
{
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value=m->FindElement("value")->CastData<RobotRaconteur::RRArray<uint16_t > >();
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_set_grasped_nodes11(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_grasped_nodes11(value);
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void ClothSimulator_skel::rr_get_grasped_nodes00(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::rr_get_grasped_nodes10(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::rr_get_grasped_nodes01(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::rr_get_grasped_nodes11(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> ClothSimulator_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::async_ClothSimulator > async_obj=get_asyncobj();
if (rr_m->MemberName == "getClothDefinition")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_getClothDefinition(boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_getClothDefinition, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<ClothDefinition > rr_return=get_obj()->getClothDefinition();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getClothLinks")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_getClothLinks(boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_getClothLinks, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<ClothLinks > rr_return=get_obj()->getClothLinks();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "setClothStiffness")
{
double stiffness =RobotRaconteur::RRArrayToScalar<double >(rr_m->FindElement("stiffness")->CastData<RobotRaconteur::RRArray<double > >());
uint8_t piterations =RobotRaconteur::RRArrayToScalar<uint8_t >(rr_m->FindElement("piterations")->CastData<RobotRaconteur::RRArray<uint8_t > >());
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_setClothStiffness(stiffness, piterations, boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_setClothStiffness,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->setClothStiffness(stiffness, piterations);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "start_recording")
{
std::string record_name =RobotRaconteur::RRArrayToString(rr_m->FindElement("record_name")->CastData<RobotRaconteur::RRArray<char> >());
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_start_recording(record_name, boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_start_recording,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->start_recording(record_name);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "stop_recording")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_stop_recording(boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_stop_recording,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->stop_recording();
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "stepForwardSim")
{
double tstep =RobotRaconteur::RRArrayToScalar<double >(rr_m->FindElement("tstep")->CastData<RobotRaconteur::RRArray<double > >());
RR_SHARED_PTR<Pose > p00 =RobotRaconteur::rr_cast<Pose >(RRGetNode()->UnpackStructure(rr_m->FindElement("p00")->CastData<RobotRaconteur::MessageElementStructure>()));
RR_SHARED_PTR<Pose > p10 =RobotRaconteur::rr_cast<Pose >(RRGetNode()->UnpackStructure(rr_m->FindElement("p10")->CastData<RobotRaconteur::MessageElementStructure>()));
RR_SHARED_PTR<Pose > p01 =RobotRaconteur::rr_cast<Pose >(RRGetNode()->UnpackStructure(rr_m->FindElement("p01")->CastData<RobotRaconteur::MessageElementStructure>()));
RR_SHARED_PTR<Pose > p11 =RobotRaconteur::rr_cast<Pose >(RRGetNode()->UnpackStructure(rr_m->FindElement("p11")->CastData<RobotRaconteur::MessageElementStructure>()));
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_stepForwardSim(tstep, p00, p10, p01, p11, boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_stepForwardSim, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<ClothState > rr_return=get_obj()->stepForwardSim(tstep, p00, p10, p01, p11);
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "stepSimToConverge")
{
RR_SHARED_PTR<Pose > p00 =RobotRaconteur::rr_cast<Pose >(RRGetNode()->UnpackStructure(rr_m->FindElement("p00")->CastData<RobotRaconteur::MessageElementStructure>()));
RR_SHARED_PTR<Pose > p10 =RobotRaconteur::rr_cast<Pose >(RRGetNode()->UnpackStructure(rr_m->FindElement("p10")->CastData<RobotRaconteur::MessageElementStructure>()));
RR_SHARED_PTR<Pose > p01 =RobotRaconteur::rr_cast<Pose >(RRGetNode()->UnpackStructure(rr_m->FindElement("p01")->CastData<RobotRaconteur::MessageElementStructure>()));
RR_SHARED_PTR<Pose > p11 =RobotRaconteur::rr_cast<Pose >(RRGetNode()->UnpackStructure(rr_m->FindElement("p11")->CastData<RobotRaconteur::MessageElementStructure>()));
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_stepSimToConverge(p00, p10, p01, p11, boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_stepSimToConverge, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<ClothState > rr_return=get_obj()->stepSimToConverge(p00, p10, p01, p11);
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
if (rr_m->MemberName == "getFaceStructure")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_getFaceStructure(boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_getFaceStructure, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > rr_return=get_obj()->getFaceStructure();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(rr_return)));
return rr_mr;
}
}
if (rr_m->MemberName == "setCameraPose")
{
RR_SHARED_PTR<Pose > pk =RobotRaconteur::rr_cast<Pose >(RRGetNode()->UnpackStructure(rr_m->FindElement("pk")->CastData<RobotRaconteur::MessageElementStructure>()));
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_setCameraPose(pk, boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_setCameraPose,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->setCameraPose(pk);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
if (rr_m->MemberName == "getRenderedImage")
{
if (async_obj)
{
RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> rr_wp=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel>(shared_from_this());
async_obj->async_getRenderedImage(boost::bind(&edu::rpi::cats::utilities::clothsim::ClothSimulator_skel::rr_getRenderedImage, rr_wp, _1, _2, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<DepthImage > rr_return=get_obj()->getRenderedImage();
rr_mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(rr_return)))));
return rr_mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void ClothSimulator_skel::rr_getClothDefinition(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel, RR_SHARED_PTR<ClothDefinition > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::rr_getClothLinks(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel, RR_SHARED_PTR<ClothLinks > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::rr_setClothStiffness(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::rr_start_recording(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::rr_stop_recording(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::rr_stepForwardSim(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel, RR_SHARED_PTR<ClothState > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::rr_stepSimToConverge(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel, RR_SHARED_PTR<ClothState > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::rr_getFaceStructure(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel, RR_SHARED_PTR<RobotRaconteur::RRArray<uint16_t > > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(ret));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::rr_setCameraPose(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::rr_getRenderedImage(RR_WEAK_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel, RR_SHARED_PTR<DepthImage > ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(ret))));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void ClothSimulator_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator > obj=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator >(rrobj1);
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void ClothSimulator_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> ClothSimulator_skel::GetSubObj(const std::string &name, const std::string &ind)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void ClothSimulator_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator > obj=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator >(rrobj1);
}

void ClothSimulator_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ClothSimulator_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void ClothSimulator_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator > obj=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator >(rrobj1);
}

void ClothSimulator_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ClothSimulator_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void ClothSimulator_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<edu::rpi::cats::utilities::clothsim::ClothSimulator > obj=RobotRaconteur::rr_cast<edu::rpi::cats::utilities::clothsim::ClothSimulator >(o);
}
RR_SHARED_PTR<void> ClothSimulator_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> ClothSimulator_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
}
}
}
}
}

